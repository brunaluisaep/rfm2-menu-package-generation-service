# Github action to build docker image and helm chart and push to AWS ECR for push to Master/Main branch
# Image and chart will be tagged with the commit id to allow a user to find the image
name: Deploy QA EU
# Controls when action will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'    
        required: true
        default: 'warning'
  
jobs:
  build-qa-eu:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-bump.outputs.VERSION_TAG }}-qa-eu
    env:
      HELM_EXPERIMENTAL_OCI: 1
      DOCKERFILE_PATH: docker/non-prod/eu/qa/Dockerfile
    steps:
      # Checkout sourcecode
      - name: Checkout
        uses: actions/checkout@v2

        # Cache Maven
      - name: Cache Maven Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

        # Set up Java 11
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      
      - name: Find tag
        id: version-tag
        uses: jimschubert/query-tag-action@v2
        with:
          include: 'RFM*' # 22.1.1

      - name: Show Tag
        id: display
        run: |
          echo 'Output from Find Tag: ${{steps.version-tag.outputs.tag}}'

      - name: Make executeable Bump Version
        run: chmod +x scripts/versionbump.sh

      - name: Bump Version
        id: version-bump
        run: |
          snapshot='SNAPSHOT'
          latestVersionTag=${{steps.version-tag.outputs.tag}}
          scripts/versionbump.sh "${latestVersionTag}" "${snapshot}"
        shell: bash

      # see: https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RFM2_AWS_GITHUB_135277302877_NONPROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RFM2_AWS_GITHUB_135277302877_NONPROD_SECRET_KEY }}
          aws-region: us-east-1
          role-to-assume: RFM2_AWS_GITHUB_135277302877_NONPROD_ROLE
          role-skip-session-tagging: true
          role-duration-seconds: 1200

      # Install Helm
      - name: Helm tool installer
        uses: azure/setup-helm@v1
        with:
          version: '3.6.3'
        id: install

      # see: https://github.com/aws-actions/amazon-ecr-login
      - name: Log in to Amazon ECR Non-Prod
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # tag prod images with commit and ref and push both to ECR
      - name: Build, tag, and push docker images to Amazon ECR Non-Prod
        env:
          ECR_REPOSITORY: ${{ secrets.RFM2_DOCKER_REPO_QA_EU }}
          IMAGE_TAG: ${{ steps.version-bump.outputs.VERSION_TAG }}-qa-eu
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          mvn clean install -Dmaven.test.skip=true
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Save and push the helm chart to ECR
      - name: Package and push helm chart to Amazon ECR Non-Prod
        working-directory: src/helm
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          HELM_ECR_REPOSITORY: ${{ secrets.RFM2_HELM_PRERELEASE_REPO_QA_EU }}
          HELM_CHART_TAG: ${{ steps.version-bump.outputs.VERSION_TAG }}-qa-eu
        run: |
          aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin $ECR_REGISTRY
          helm chart save . $ECR_REGISTRY/$HELM_ECR_REPOSITORY:$HELM_CHART_TAG
          helm chart push $ECR_REGISTRY/$HELM_ECR_REPOSITORY:$HELM_CHART_TAG

      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy-qa-eu:
    # The type of runner that the job will run on
    runs-on: [ self-hosted, rfm2, eu-qa2 ]
    needs: build-qa-eu
    environment:
      name: qa
    env:
      HELM_EXPERIMENTAL_OCI: 1
      ECR_REGISTRY: 135277302877.dkr.ecr.us-east-1.amazonaws.com
      ECR_REPOSITORY: ${{ secrets.RFM2_DOCKER_REPO_QA_EU }}
      IMAGE_TAG: ${{ needs.build-qa-eu.outputs.version }}
    #   CLIENT_ID: ${{secrets.RFM2_EU_QA_COGNITO_READ_ALL_CLIENT_ID}}
    #   CLIENT_SECRET: ${{secrets.RFM2_EU_QA_COGNITO_READ_ALL_CLIENT_SECRET}}
    #   COGNITO_URL: https://mcd-eu-qa-package-generation-service.auth.us-east-1.amazoncognito.com/oauth2/token?grant_type=client_credentials
    #   URL: https://zonwzj5ps9-vpce-0cb9fc1da3b2a3d54.execute-api.us-east-1.amazonaws.com/eu-qa
    steps:
      # Checkout sourcecode
      - name: Checkout
        uses: actions/checkout@v2

      # see: https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RFM2_AWS_GITHUB_135277302877_NONPROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RFM2_AWS_GITHUB_135277302877_NONPROD_SECRET_KEY }}
          aws-region: us-east-1
          role-to-assume: RFM2_AWS_GITHUB_135277302877_NONPROD_ROLE
          role-skip-session-tagging: true
          role-duration-seconds: 1200

      - name: Login to EKS
        run: |
          cluster_name="$(aws eks list-clusters --region us-east-1 --query 'clusters[]' --output text \
          | tr '\t' '\n' | grep "${CLUSTER_PREFIX}")"
          aws eks \
          --region us-east-1 \
          update-kubeconfig --name "${cluster_name}" \
          --role-arn="${CLUSTER_ROLE_ARN}"
        env:
          CLUSTER_PREFIX: eks-mcd-rfm-eu-qa
          CLUSTER_ROLE_ARN: arn:aws:iam::135277302877:role/RFM2_AWS_GITHUB_135277302877_NONPROD_ROLE

      # Install Helm
      - name: Helm tool installer
        uses: azure/setup-helm@v1
        with:
          version: '3.6.3'
        id: install

      - name: Login to ECR
        run: |
          aws ecr get-login-password \
          --region us-east-1 | helm registry login \
          --username AWS \
          --password-stdin $ECR_REGISTRY

      - name: Pull and Export Helm Chart
        run: |
          helm chart pull $ECR_REGISTRY/$HELM_ECR_REPOSITORY:$IMAGE_TAG
          helm chart export $ECR_REGISTRY/$HELM_ECR_REPOSITORY:$IMAGE_TAG
        env:
          HELM_ECR_REPOSITORY: ${{ secrets.RFM2_HELM_PRERELEASE_REPO_QA_EU }}

      - name: Deploy PKG GEN SVC Helm Charts - EU QA
        run: helm upgrade --install --wait --timeout 600s --create-namespace --debug -f $CHART_PATH/values.yaml -n $EKS_NAMESPACE --set $HELM_VALUES $CHART_PATH ./$CHART_PATH
        env:
          EKS_NAMESPACE: pkg-gen-svc-eu-qa
        #   HELM_VALUES: packageGenerationService.image.tag=${{ needs.build.outputs.version }},packageGenerationService.env=eu-qa,global.namespace=pkg-gen-svc-eu-qa,packageGenerationService.serviceAccountName=rfm2-eu-qa-packageGenerationService-serviceaccount,newRelic.licensekey=${{ secrets.NEW_RELIC_550674_LICENSE_KEY }},newRelic.appname=us-rfm2-eu-qa-retailmenu,packageGenerationService.market=EU,packageGenerationService.activeProfile=eu-qa,packageGenerationService.logLevel=DEBUG
          HELM_VALUES: packageGenerationService.image.repository=135277302877.dkr.ecr.us-east-1.amazonaws.com/rfm2-menu-package-generation-service-qa-eu,packageGenerationService.image.tag=${{ needs.build-qa-eu.outputs.version }},packageGenerationService.env=eu-qa,global.namespace=pkg-gen-svc-eu-qa,packageGenerationService.market=EU,packageGenerationService.activeProfile=eu-qa,packageGenerationService.logLevel=DEBUG
          CHART_PATH: package-generation-service

    #   - name: Redeploy API Gateway Stage - EU QA
    #     run: aws apigateway create-deployment --rest-api-id zonwzj5ps9 --stage-name eu-qa

      - name: wait
        run: sleep 180

    #   - name: start opentest server
    #     run: |
    #       cd src/opentest/server
    #       opentest server &
    #   - name: start opentest actor
    #     run: |
    #       cd src/opentest
    #       opentest actor actor1 & opentest session create --template "Smoke Tests EU" --wait --out junit.xml
    #     id: integrationTest
    #     continue-on-error: true

    #   - name: validate integration test result and rollback QA
    #     if: steps.integrationTest.outcome == 'failure'
    #     env:
    #       CHART_PATH: package-generation-service
    #       EKS_NAMESPACE: pkg-gen-svc-eu-qa
    #     run: |
    #       helm rollback --wait --timeout 600s $CHART_PATH -n $EKS_NAMESPACE 0

    #   - name: Login to EKS DEV for rollback
    #     if: steps.integrationTest.outcome == 'failure'
    #     run: |
    #       cluster_name="$(aws eks list-clusters --region us-east-1 --query 'clusters[]' --output text \
    #       | tr '\t' '\n' | grep "${CLUSTER_PREFIX}")"
    #       aws eks \
    #       --region us-east-1 \
    #       update-kubeconfig --name "${cluster_name}" \
    #       --role-arn="${CLUSTER_ROLE_ARN}"
    #     env:
    #       CLUSTER_PREFIX: eks-mcd-rfm-eu-dev
    #       CLUSTER_ROLE_ARN: arn:aws:iam::135277302877:role/RFM2_AWS_GITHUB_135277302877_NONPROD_ROLE

    #   - name: validate integration test result and rollback DEV
    #     if: steps.integrationTest.outcome == 'failure'
    #     env:
    #       CHART_PATH: package-generation-service
    #       EKS_NAMESPACE: pkg-gen-svc-eu-dev
    #     run: |
    #       helm rollback --wait --timeout 600s $CHART_PATH -n $EKS_NAMESPACE 0
    #       exit 1
 